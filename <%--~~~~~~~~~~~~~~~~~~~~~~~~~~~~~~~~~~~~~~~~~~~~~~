<%--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~
  ~ ADOBE CONFIDENTIAL
  ~ __________________
  ~
  ~  Copyright 2013 Adobe Systems Incorporated
  ~  All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Adobe Systems Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Adobe Systems Incorporated and its
  ~ suppliers and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is strictly forbidden unless prior written permission is obtained
  ~ from Adobe Systems Incorporated.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--%>

<%@include file="/libs/foundation/global.jsp"%><%
%><%@page import="
	   com.day.cq.commons.JS,
	   com.day.cq.i18n.I18n,
	   com.day.cq.personalization.AreaService,
	   com.day.cq.personalization.TargetedContentManager,
	   com.day.cq.personalization.ClientContextUtil,
	   com.day.cq.personalization.Teaser,
	   com.day.cq.wcm.api.Page,
	   com.day.cq.wcm.api.WCMMode,
	   com.day.cq.wcm.core.stats.PageViewStatistics,
	   com.google.gson.GsonBuilder,
	   com.google.gson.JsonArray,
	   com.google.gson.JsonElement,
	   com.google.gson.JsonObject,
	   com.google.gson.JsonParser,
	   com.google.gson.JsonPrimitive,
	   com.google.gson.reflect.TypeToken,
	   java.io.StringWriter,
	   java.lang.reflect.Type,
	   java.net.URI,
	   java.util.ArrayList,
	   java.util.HashSet,
	   java.util.List,
	   java.util.Set,
	   org.apache.commons.collections.CollectionUtils,
	   org.apache.commons.collections.Predicate,
	   org.apache.sling.api.resource.Resource,
	   org.apache.sling.api.resource.ResourceResolver,
	   org.apache.sling.api.SlingHttpServletRequest" %><%

    final I18n i18n = new I18n(slingRequest);
    final PageViewStatistics pageStats = sling.getService(PageViewStatistics.class);
    final TargetedContentManager targetedContentManager = sling.getService(TargetedContentManager.class);
    final AreaService areaService = sling.getService(AreaService.class);

    /* get resource info */
    final String campaignPath = properties.get("campaignpath", String.class);
    final String strategyPath = properties.get("strategyPath", "");
    final String location = properties.get("location", resource.getPath());

    String strategy = "";
    if (strategyPath.length() > 0) {
        strategy = Text.getName(strategyPath);
        strategy = strategy.replaceAll(".js", "");
    }

    /* css class based on campaign name */
    String campaignClass = "";

    if (campaignPath != null) {
        Page campaignPage = pageManager.getPage(campaignPath);
        campaignClass = (campaignPage == null) ? "" : ("campaign-" + campaignPage.getName());
    }

    /* tracking url */
    URI trackingURI = (pageStats == null) ? null : pageStats.getTrackingURI();
    String trackingURL = (trackingURI == null) ? null : trackingURI.toString();

    /* teaser id */
    String targetDivId = ClientContextUtil.getId(resource.getPath());

    JSONObject teaserInfo = targetedContentManager.getTeaserInfo(resourceResolver, campaignPath, location);
    JSONArray allTeasers = teaserInfo.getJSONArray("allTeasers");

    String selectors = slingRequest.getRequestPathInfo().getSelectorString();
    selectors = selectors != null ? "." + selectors : "";

    for (int i = 0; i < allTeasers.length(); i++) {
        JSONObject t = (JSONObject) allTeasers.get(i);
        t.put("url", t.get("path") + "/_jcr_content/par" + selectors + ".html");
    }

    // use "default" child node as default teaser and add at the end of the teaser list
    JSONObject defaultTeaser = new JSONObject();
    defaultTeaser.put("path", resource.getPath() + "/default");
    defaultTeaser.put("url", resource.getPath() + ".default" + selectors + ".html");
    defaultTeaser.put("name", "default");
    defaultTeaser.put("title", i18n.get("Default"));
    defaultTeaser.put("campainName", "");
    defaultTeaser.put("thumbnail", resource.getPath() + ".thumb.png");
    //defaultTeaser.put("id", campaignName + "_" + teaser.getName());
    allTeasers.put(defaultTeaser);

    final Set<Resource> areas = areaService.getAreasForPage(currentPage.adaptTo(Resource.class));
    final Set<String> mappedAreaPaths = new HashSet<String>(areas.size());
    for(Resource area : areas){
        mappedAreaPaths.add(resourceResolver.map(area.getPath()));
    }

    if (allTeasers.length() > 0) {
        String targetingEngine = (String)slingRequest.getAttribute("engine");
        if ("cq".equals(targetingEngine)) {
            String decoratedTeaserVariants = decorateTeaserUrl(slingRequest, allTeasers.toJson());
%>
<script type="text/javascript">
    $CQ(function() {
        $("#<%= xssAPI.encodeForHTMLAttr(targetDivId) %>").parent().on('target-dom-loaded', function() {
            $CQ("#<%= xssAPI.encodeForHTMLAttr(targetDivId) %>").css('visibility','visible');
        });
        CQ_Analytics.Engine.loadTeaser({ targetID: '<%= xssAPI.encodeForJSString(targetDivId) %>',<%
                                                  %> teasers: <%= allTeasers %>,<%
                                                  %> strategy: '<%= xssAPI.encodeForJSString(strategy) %>',<%
                                                  %> trackingURL: '<%= xssAPI.encodeForJSString(trackingURL) %>'});
    });
</script>
<%      } else if ("cq_contexthub".equals(targetingEngine)) {
    String decoratedTeaserVariants = decorateTeaserUrl(slingRequest, allTeasers.toJson()); %>
<script type="text/javascript">
    if (window.ContextHub && ContextHub.SegmentEngine) {
        ContextHubJQ(function() {
            ContextHub.eventing.on(ContextHub.Constants.EVENT_TEASER_LOADED, function(){
                $CQ("#<%= xssAPI.encodeForHTMLAttr(targetDivId) %>").css('visibility','visible');
            });
            ContextHub.SegmentEngine.PageInteraction.Teaser({
                locationId: '<%= xssAPI.encodeForJSString(targetDivId) %>',
                variants: <%= decoratedTeaserVariants %>,
                strategy: '<%= xssAPI.encodeForJSString(strategy) %>',
                trackingURL: <%= (trackingURL != null) ? ("'" + xssAPI.encodeForJSString(trackingURL) + "'") : "null" %>
            });
        });
    }
</script>
<% } %>

<div id="<%= xssAPI.encodeForHTMLAttr(targetDivId) %>" class="campaign <%= xssAPI.encodeForHTMLAttr(campaignClass) %>" style="visibility: hidden">

    <%
        if (resource.getChild("default") != null) {
            StringWriter defaultHtml = new StringWriter();
            pageContext.pushBody(defaultHtml);
    %><sling:include replaceSelectors="noscript" path="default"/><%
    pageContext.popBody();
%><%=defaultHtml%><%
    } %>
</div>

<%  } else if (WCMMode.fromRequest(request) == WCMMode.EDIT) { %>
<style type="text/css">
    .cq-teaser-placeholder-off {
        display: none;
    }
</style>
<h3 class="cq-texthint-placeholder"><%=i18n.get("No active campaigns target this teaser") %></h3>
<img src="/libs/cq/ui/resources/0.gif" class="cq-teaser-placeholder" alt="">
<% } %>

<%!
    private String decorateTeaserUrl(SlingHttpServletRequest request, String json) {
        JsonParser parser = new JsonParser();
        JsonArray elements = parser.parse(json).getAsJsonArray();

        JsonArray newArray = new JsonArray();
        String contextPath = request.getContextPath();
        for (JsonElement object: elements) {
            JsonObject element = object.getAsJsonObject();
            String teaserPath = contextPath + element.get("path").getAsString();;
            String url = contextPath + element.get("url").getAsString();

            element.add("path", new JsonPrimitive(teaserPath));
            element.add("url", new JsonPrimitive(url));
            newArray.add(element);
        }

        String decoratedTeaserVariants = newArray.toString();
        return decoratedTeaserVariants;
    }
%>
